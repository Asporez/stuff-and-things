// BlueHack
// A tool created for my personal use, but go ahead and use it if you want :3
// You can also take a look at the code to learn how it works and modify it for your needs
// Feel free to use this code in any shape or form or to even redistribute it

//      |\__/,|   (`\
//   _.|o o  |_   ) )
// -(((---(((--------
// --------------------------------


TITLE = "BlueHack v1.8.2"
NEW_PASSWORD = "thegame"


// --------------------------------


metaxploit = include_lib("/lib/metaxploit.so")
if not metaxploit then
	metaxploit = include_lib(current_path + "/metaxploit.so")
	if not metaxploit then exit("<color=#f00>metaxploit not found</color>")
end if

crypto = include_lib("/lib/crypto.so")
if not crypto then
	crypto = include_lib(current_path + "/crypto.so")
	if not crypto then exit("<color=#f00>crypto not found</color>")
end if


// --------------------------------


errorState = false
GOOD_FILES = [
	"\/boot\/kernel\.img",
	"\/boot\/initrd\.img",
	"\/boot\/System\.map",
	"\/etc\/passwd",
	"\/etc\/xorg\.conf",
	"\/etc\/fstab",
	"\/etc\/apt\/sources\.txt",
	"\/etc\/apt\/aptcache\.bin",
	"\/lib\/init\.so",
	"\/lib\/kernel_module\.so",
	"\/lib\/net\.so",
	"\/lib\/aptclient\.so",
	"\/sys\/xorg\.sys",
	"\/sys\/config\.sys",
	"\/sys\/network\.cfg",
	"\/var\/system\.log",
	"\/bin\/cd",
	"\/bin\/ls",
	"\/bin\/ps",
	"\/bin\/pwd",
	"\/bin\/ifconfig",
	"\/bin\/iwconfig",
	"\/bin\/iwlist",
	"\/bin\/cat",
	"\/bin\/rm",
	"\/bin\/mv",
	"\/bin\/cp",
	"\/bin\/ssh",
	"\/bin\/ftp",
	"\/bin\/mkdir",
	"\/bin\/rmdir",
	"\/bin\/chmod",
	"\/bin\/reboot",
	"\/bin\/whois",
	"\/bin\/sudo",
	"\/bin\/useradd",
	"\/bin\/userdel",
	"\/bin\/passwd",
	"\/bin\/nslookup",
	"\/bin\/build",
	"\/bin\/touch",
	"\/bin\/chown",
	"\/bin\/chgrp",
	"\/bin\/groupadd",
	"\/bin\/groupdel",
	"\/bin\/groups",
	"\/bin\/kill",
	"\/bin\/ping",
	"\/bin\/apt-get",
	"\/bin\/man",
	"\/bin\/whoami",
	"\/usr\/bin\/FileExplorer\.exe",
	"\/usr\/bin\/Terminal\.exe",
	"\/usr\/bin\/Mail\.exe",
	"\/usr\/bin\/Browser\.exe",
	"\/usr\/bin\/Notepad\.exe",
	"\/usr\/bin\/Settings\.exe",
	"\/usr\/bin\/LogViewer\.exe",
	"\/usr\/bin\/CodeEditor\.exe",
	"\/usr\/bin\/ImageViewer\.exe",
	"\/usr\/bin\/PDFReader\.exe",

	".*\/bluehack\/.*",

	// "\/bin\/airmon",
	// "\/bin\/aireplay",
	// "\/bin\/aircrack",
	// "\/usr\/bin\/Map\.exe",
	// "\/usr\/bin\/Manual\.exe",
	// "\/usr\/bin\/ScanLan\.exe",
	// "\/usr\/bin\/Chat\.exe"

	".*\/StudentsViewer\.exe",
	".*\/PoliceRecord\.exe",
	".*\/trafficNetwork",

	"\/lib\/libsmtp\.so",
	"\/lib\/libssh\.so",
	"\/lib\/libhttp\.so",
	"\/lib\/libftp\.so",
	"\/server\/smtpd",
	"\/server\/conf\/smtpd\.conf",
	"\/server\/conf\/UserConfig\.sys",
	"\/server\/sshd",
	"\/server\/encode\.src",
	"\/server\/decode\.bin",
	"\/server\/httpd",
	"\/server\/ftpd",
	"\/server\/conf\/sshd\.conf",
	"\/server\/conf\/httpd\.conf",
	"\/server\/conf\/ftpd\.conf",
	"\/Public\/htdocs\/website\.html",
]
BAD_FILES = [".*\.Trash.*", ".*Bank\.txt", ".*Mail\.txt", ".*Browser\.txt", ".*Map\.txt"]
ATTACK_FILES = [".*Bank\.txt", ".*Mail\.txt", ".*Browser\.txt", ".*Map\.txt"]
NUKE_FOLDERS = ["/etc", "/lib", "/sys", "/root", "/usr", "/boot", "/home"]

error = function(string)
	print("<color=#f00>ERROR: " + string + "</color>")
	errorState = true
end function

main_title = function(clear=false)
	print("<color=#0af><b>-----==== " + TITLE + " ====-----</b></color>", clear)
end function

title = function(string)
	print("<color=#0af>--- " + string + " ---</color>")
end function

subtitle = function(string)
	print("<color=#0af>" + string + "</color>")
end function

alt = function(string)
	print("<color=#f0f><i>--- " + string + " ---</i></color>")
end function

warn = function(string)
	print("<color=#ff0>" + string + "</color>")
end function

pad_string = function(string, min_len)
	while string.len < min_len
		string = string + " "
	end while
	return string
end function

print_port = function(router, port, targetLanIp)
	badPort = false

	portNum = pad_string(str(port.port_number), 6)
	if port.is_closed then
		badPort = true
		state = "<color=#f00>closed </color>"
	else
		state = "open   "
	end if
	if targetLanIp and port.get_lan_ip != targetLanIp then
		badPort = true
		lanIp = "<color=#f00>" + pad_string(port.get_lan_ip, 16) + "</color>"
	else
		lanIp = pad_string(port.get_lan_ip, 16)
	end if

	outputString = portNum + state + lanIp + router.port_info(port)
	print(outputString)
	return badPort
end function

matches_one_of = function(text, patternList)
	for pattern in patternList
		if text.is_match(pattern) then return true
	end for
	return false
end function

list_contains_item = function(list, item)
	for listItem in list
		if listItem == item then return true
	end for
	return false
end function


// --------------------------------


SEPARATOR = char(10)
load_scan_from_cache = function(metaLib)
	cacheFile = get_shell.host_computer.File(current_path + "/scans.txt")
	if cacheFile == null or cacheFile.get_content() == null then return null

	cacheData = cacheFile.get_content()
	for line in cacheData.split(SEPARATOR)
		parts = line.split(";")
		if parts[0] != metaLib.lib_name or parts[1] != metaLib.version then continue

		return parts[2].split(" ")
	end for
end function

save_scan_to_cache = function(metaLib, scanResult)
	cacheFile = get_shell.host_computer.File(current_path + "/scans.txt")
	if cacheFile == null then
		get_shell.launch("/bin/touch", current_path + "/scans.txt")
		cacheFile = get_shell.host_computer.File(current_path + "/scans.txt")
	end if

	cacheData = cacheFile.get_content()
	if cacheData.len > 0 then cacheData = cacheData + SEPARATOR
	cacheData = cacheData + metaLib.lib_name + ";" + metaLib.version + ";" + scanResult.join(" ")
	cacheFile.set_content(cacheData)
end function

scan_lib = function(metaLib)
	cacheScan = load_scan_from_cache(metaLib)
	if cacheScan != null then return cacheScan

	scanResult = metaxploit.scan(metaLib)
	save_scan_to_cache(metaLib, scanResult)
	return scanResult
end function

// --------------------------------

load_hash_from_cache = function(hashValue)
	cacheFile = get_shell.host_computer.File(current_path + "/hashes.txt")
	if cacheFile == null or cacheFile.get_content() == null then return null

	cacheData = cacheFile.get_content()
	for line in cacheData.split(SEPARATOR)
		parts = line.split(";")
		if parts[0] == hashValue then return parts[1]
	end for
end function

save_hash_to_cache = function(hashValue, password)
	cacheFile = get_shell.host_computer.File(current_path + "/hashes.txt")
	if cacheFile == null then
		get_shell.launch("/bin/touch", current_path + "/hashes.txt")
		cacheFile = get_shell.host_computer.File(current_path + "/hashes.txt")
	end if

	cacheData = cacheFile.get_content()
	if cacheData.len > 0 then cacheData = cacheData + SEPARATOR
	cacheData = cacheData + hashValue + ";" + password
	cacheFile.set_content(cacheData)
end function

crack_password = function(passwdData)
	isHash = true
	for charr in passwdData
		if charr == ":" then isHash = false
	end for

	if isHash then
		pwdHash = passwdData
	else
		pwdHash = passwdData.split("\n")[0].split(":")[1]
	end if

	password = load_hash_from_cache(pwdHash)
	if password != null then return password

	if isHash then
		subtitle("Deciphering hash")
	else
		subtitle("Deciphering password")
	end if

	wait(0.01) // To fix bug with library clearing previous line
	password = crypto.decipher(pwdHash)
	if password == null then
		print(passwdData)
		warn("Password was null!?")
		return null
	end if

	save_hash_to_cache(pwdHash, password)

	return password
end function


// ------------------------


get_targetIp = function(target)
	if not is_valid_ip(target) then
		targetIp = nslookup(target)
		if not is_valid_ip(targetIp) then
			error("Invalid target '" + target + "'")
			return null
		end if
		return targetIp
	else
		return target
	end if
end function

get_target_ports = function(targetIp, targetLanIp)
	if is_lan_ip(targetIp) then
		router = get_router;
	else
		router = get_router(targetIp)
	end if

	if router == null then
		error("Router is null")
		return null
	end if

	if is_lan_ip(targetIp) then
		ports = router.device_ports(targetIp)
	else
		ports = router.used_ports
	end if

	print("PORT  STATE  LAN             SERVICE")
	goodPorts = []
	for port in ports
		badPort = print_port(router, port, targetLanIp)
		if badPort then
			continue
		end if

		goodPorts.push(port)
	end for

	if goodPorts.len == 0 then 
		error("No valid ports found")
		return null
	end if
	return goodPorts
end function

get_all_files = function(file=null, include=null, exclude=null, checkPermissions=false)
	if file == null then file = get_shell.host_computer.File("/")

	files = []
	for nextFile in file.get_files()
		if checkPermissions and (nextFile.permissions != "----------" or nextFile.owner != "root" or nextFile.group != "root") then
			warn("Bad permissions for file: " + nextFile.path)
		end if

		if include != null and matches_one_of(nextFile.path, include) then
			files.push(nextFile)
		else if exclude != null and not matches_one_of(nextFile.path, exclude) then
			files.push(nextFile)
		else if include == null and exclude == null then
			files.push(nextFile)
		end if
	end for

	for nextFolder in file.get_folders()
		if checkPermissions and (nextFolder.permissions != "d---------"  or nextFolder.owner != "root" or nextFolder.group != "root") then
			warn("Bad permissions for folder: " + nextFolder.path)
		end if

		for newFile in get_all_files(nextFolder, include, exclude, checkPermissions)
			files.push(newFile)
		end for
	end for

	return files
end function

justPrinted = []
attack_files = function(file)
	for file in get_all_files(file, ATTACK_FILES)
		if list_contains_item(justPrinted, file.path) then continue
		justPrinted.push(file.path)
		coloredPath = file.path.replace("Bank.txt", "<color=#0af>Bank.txt</color>")
		coloredPath = coloredPath.replace("Mail.txt", "<color=#0af>Mail.txt</color>")
		print(coloredPath)
		print(file.get_content)
	end for
end function

bad_files = function()
	title("Bad files")

	for file in get_all_files(null, BAD_FILES, null, true)
		warn(file.path)
	end for
end function

interesting_files = function()
	title("Intresting files")

	for file in get_all_files(null, null, GOOD_FILES)
		print(file.path)
	end for
end function

get_vulns = function(targetIp, port=null)
	if port == null then
		subtitle("Scanning For Vulns in " + targetIp)
		netSession = metaxploit.net_use(targetIp)
	else
		subtitle("Scanning For Vulns in port " + port)
		netSession = metaxploit.net_use(targetIp, port)
	end if

	if not netSession then
		error("Unable to connect to " + targetIp + ":" + port)
		return null
	end if

	metaLib = netSession.dump_lib
	wait(0.01) // To fix bug with library clearing previous line
	scanData = scan_lib(metaLib)
	vulns = []
	for entry in scanData
		memoryScan = metaxploit.scan_address(metaLib, entry)
		for part in memoryScan.split("<b>")
			if not part.matches("</b>") then
				continue
			end if

			vuln = part.split(" ")[0]
			if vuln.matches("\d|[a-z_]*\.so") then
				continue
			end if
			vuln = vuln.replace("\.", "").replace("</b>", "")
			vulns.push([entry, vuln])
		end for
	end for

	return [metaLib, vulns]
end function

try_vulns = function(metaLib, vulns, param)
	subtitle("Probing Vulns")
	passwdData = null
	shellVuln = null
	shellUser = null
	for vuln in vulns
		print("<color=#888>------------------------</color>")
		result = metaLib.overflow(vuln[0], vuln[1], param)

		if result == null then continue

		type = typeof(result)
		if type == "number" then
			alt("Number exploit succeeded with output " + result) // TODO check if the number actually means something
			continue
		end if
		if typeof(result) == "shell" then
			passwdFile = result.host_computer.File("/etc/passwd")
			hasRead = false
			hasWrite = false
			if passwdFile != null then
				hasRead = passwdFile.has_permission("r")
				hasWrite = passwdFile.has_permission("w")
			end if

			if hasRead and passwdFile.get_content() and not passwdData then
				alt("Gained password from shell exploit")
				passwdData = passwdFile.get_content()
			end if

			if not hasRead and shellUser == null then
				alt("Gained shell for guest")
				shellUser = "guest"
				shellVuln = vuln
			else if hasRead and not hasWrite and (shellUser == null or shellUser == "guest") then
				alt("Gained shell for user")
				shellUser = "user"
				shellVuln = vuln
			else if hasWrite and shellUser != "root" then
				alt("Gained shell for root")
				shellUser = "root"
				shellVuln = vuln
			end if
		end if
		if type == "file" then
			if result.is_folder then
				attack_files(result)
			end if
			if passwdData != null then continue
			if result.name != "etc" then
				warn("Ignoring access to " + result.name())
				continue
			end if
			for file in result.get_files()
				if file.name() != "passwd" then continue
				content = file.get_content()
				if content != null then
					alt("Gained password from file exploit")
					passwdData = content
				else
					warn("Failed to read /etc/passwd")
				end if
			end for
		else if type == "computer" then
			attack_files(result.File("/"))
			if passwdData != null then continue
			passFile = result.File("/etc/passwd")
			if passFile == null or not passFile.get_content() then
				warn("Failed to read /etc/passwd")
				continue
			end if
			alt("Gained password from computer exploit")
			passwdData = passFile.get_content()
		end if
	end for
	print("<color=#888>------------------------</color>")
	return [passwdData, shellVuln, shellUser]
end function

attack = function(target, targetLanIp, router=false)
	justPrinted = []
	targetIp = get_targetIp(target)
	if errorState then return

	if router then
		title("Attacking router at " + target)
		ports = [null]
	else
		title("Attacking computer at " + target)
		ports = get_target_ports(targetIp, targetLanIp)
		if errorState then return
	end if

	hasSshPort = false
	for port in ports
		if port == null then continue
		if port.port_number == 22 then hasSshPort = true
	end for

	passwdData = null
	shellVulnMetaLib = null
	shellVuln = null
	shellUser = null
	for port in ports
		if router then
			output = get_vulns(targetIp)
		else
			output = get_vulns(targetIp, port.port_number)
		end if
		if errorState then return

		metaLib = output[0]
		vulns = output[1]
		if router then
			results = try_vulns(metaLib, vulns, targetLanIp)
		else
			results = try_vulns(metaLib, vulns, NEW_PASSWORD)
		end if

		newPasswdData = results[0]
		newShellVuln = results[1]
		newShellUser = results[2]

		if passwdData == null then
			passwdData = newPasswdData
		end if

		if newShellUser == "guest" and shellUser == null then
			shellVulnMetaLib = metaLib
			shellUser = newShellUser
			shellVuln = newShellVuln
		else if newShellUser == "user" and (shellUser == null or shellUser == "guest") then
			shellVulnMetaLib = metaLib
			shellUser = newShellUser
			shellVuln = newShellVuln
		else if newShellUser == "root" and shellUser != "root" then
			shellVulnMetaLib = metaLib
			shellUser = newShellUser
			shellVuln = newShellVuln
		end if

		if passwdData == null then
			passwdStatus = "null"
		else
			passwdStatus = ":)"
		end if
		if shellUser == null then
			shellUserStatus = "none"
		else
			shellUserStatus = shellUser
		end if
		subtitle("PasswdData: " + passwdStatus + ". Highest permissions " + shellUserStatus)

		if shellUser == "root" then
			result = shellVulnMetaLib.overflow(shellVuln[0], shellVuln[1])
			result.start_terminal
		else if passwdData and hasSshPort then
			password = crack_password(passwdData)
			if password != null then
				alt("Root password: " + password)

				out = get_shell.connect_service(target, 22, "root", password)
				if typeof(out) == "shell" then out.start_terminal
				out = get_shell.connect_service(target, 22, "root", NEW_PASSWORD)
				if typeof(out) == "shell" then out.start_terminal
			end if

			warn("Failed to connect through ssh")
		else if shellUser != null and passwdData then
			password = crack_password(passwdData)
			alt("Root password: " + password)
			result = shellVulnMetaLib.overflow(shellVuln[0], shellVuln[1])
			result.start_terminal
		end if
	end for
	if passwdData == null and shellUser != null and shellUser != "root" then
		print("Highest shell privilidges found: " + shellUser)
		opt = user_input("Use shell even with no access to /etc/passwd? ")
		if opt.lower == "y" or opt.lower == "yes" then
			result = shellVulnMetaLib.overflow(shellVuln[0], shellVuln[1])
			result.start_terminal
		end if
	else if passwdData != null and shellUser == null then
		opt = user_input("No shell exploit found, still crack root password? ")
		if opt.lower == "y" or opt.lower == "yes" then
			password = crack_password(passwdData)
			alt("Root password: " + password)
		end if
	else if shellUser == null then
		error("No shell exploit found :(")
	end if
end function

banks = function()
	title("Stealing all bank credentials")

	homeFolder = get_shell.host_computer.File("/home/")
	print("| user                      | password   |")
	print("| ------------------------- | ---------- |")
	for userFolder in homeFolder.get_folders()
		username = userFolder.name()
		if username == "guest" then continue

		file = get_shell.host_computer.File("/home/" + username + "/Config/Bank.txt")
		if file == null then
			warn("/home/"+username+"/Config/Bank.txt was null")
			continue
		end if
		passwdData = file.get_content()
		username = passwdData.split(":")[0]
		password = crack_password(passwdData)

		print("| " + pad_string(username, 25) + " | " + pad_string(password, 10) + " |")
	end for
end function

rm_file = function(filePath)
    file = get_shell.host_computer.File(filePath)
    if file == null then return
    print("Deleting " + filePath)
    get_shell.launch("/bin/rm", "-r " + filePath)
end function

corrupt_logs = function(harden=false)
	if harden then
		print("<color=#0af>Hardening machine</color>")
        home = get_shell.host_computer.File("/root/home.txt") != null
        shell = get_shell

        shell.launch("/bin/chmod", "-R u-rwx /")
        shell.launch("/bin/chmod", "-R g-rwx /")
        shell.launch("/bin/chmod", "-R o-rwx /")
        shell.launch("/bin/chown", "-R root /")
        shell.launch("/bin/chgrp", "-R root /")

		rm_file("/home")
        rm_file("/etc/passwd")
        rm_file("/root/Config")
        rm_file("/root/Downloads")
        rm_file("/root/Desktop")
        rm_file("/root/.Trash")
    end if

    print("<color=#0af>Corrupting logs</color>")
    get_shell.host_computer.touch("/var/", "tmp")
    tmpfile = get_shell.host_computer.File("/var/tmp")
    errorCode = tmpfile.move("/var/", "system.log")
    if typeof(errorCode) == "string" or errorCode != 1 then
        error("Failed to corrupt logs " + errorCode)
    end if
end function

nuke = function()
	title("Nuking current computer")
	for folderPath in NUKE_FOLDERS
		folder = get_shell.host_computer.File(folderPath)
		if folder == null then
			warn(folderPath + " was null")
			continue
		end if

		output = folder.delete()
		if typeof(output) == "string" and output.len > 0 then
			warn("Failed to nuke folder " + folderPath)
			warn(output)
		else
			print("Deleted " + folderPath)
		end if
	end for
end function

decipher_from_file = function(file_path)
	title("Deciphering passwords in file " + file_path)
	file = get_shell.host_computer.File(file_path)
	if file == null or file.get_content() == null then 
		error("File was null")
		return
	end if
	fileData = file.get_content()

	print("| user                      | password   |")
	print("| ------------------------- | ---------- |")
	for line in fileData.split("\n")
		user = line.split(":")[0]
		hashValue = line.split(":")[1]
		password = crack_password(hashValue)
		print("| " + pad_string(user, 25) + " | " + pad_string(password, 10) + " |")
	end for
end function


// --------------------------------


USAGE = "<b>a|attack [ip|address] (lan_ip) <color=#888>------</color> </b><i>Attack target machine</i>
<b>ar|attackrouter [ip|address] [lan_ip] </b><i>Attack target router</i>
<b>b|banks <color=#888>-----------------------------</color> </b><i>Decipher all bank details on current computer</i>
<b>bad <color=#888>---------------------------------</color> </b><i>Prints out bad files on current computer that you might want to delete</i>
<b>c|corrupt <color=#888>---------------------------</color> </b><i>Corrupts logs</i>
<b>clear <color=#888>-------------------------------</color> </b><i>Clears terminal</i>
<b>d|decipher|crack [hash] <color=#888>-------------</color> </b><i>Deciphers given hash</i>
<b>df|decipherfile|crackfile [filepath]  </b><i>Deciphers all passwords/bankdetails/etc in given file</i>
<b>h|help <color=#888>------------------------------</color> </b><i>Prints this message</i>
<b>ha|harden <color=#888>---------------------------</color> </b><i>Hardens current machine (server) by fixing file permissions and deleting bad files</i>
<b>i|interesting <color=#888>-----------------------</color> </b><i>Prints out interesting files on current computer</i>
<b>n|nmap [ip|address] <color=#888>-----------------</color> </b><i>Nmaps given ip / address</i>
<b>nuke <color=#888>--------------------------------</color> </b><i>Nukes current computer</i>
<b>q|quit|e|exit  <color=#888>----------------------</color> </b><i>Exits program</i>"

main = function()
	while true
		if errorState then
			warn("Previous command failed")
			errorState = false
		end if

		cmd = user_input("<color=#0af>></color> ")

		command = cmd.split(" ")[0].lower
		if command == "a" or command == "attack" then
			opts = cmd.split(" ")
			if opts.len < 2 or opts.len > 3 then
				print("Usage: a|attack [ip|address] (lan_ip)")
			else
				if opts.len == 2 then
					attack(opts[1])
				else
					attack(opts[1], opts[2])
				end if
			end if
		else if command == "ar" or command == "attackrouter" then
			opts = cmd.split(" ")
			if opts.len != 3 then
				print("Usage: ar|attackrouter [ip|address] [lan_ip]")
			else
				attack(opts[1], opts[2], true)
			end if
		else if command == "b" or command == "banks" then
			banks()
		else if command == "bad" then
			bad_files()
		else if command == "c" or command == "corrupt" then
			corrupt_logs()
		else if command == "clear" then
			main_title(true)
		else if command == "d" or command == "decipher" or command == "crack" then
			opts = cmd.split(" ")
			if opts.len != 2 then
				print("Usage: d [hash]")
			else
				password = crack_password(opts[1])
				print("Password: " + password)
			end if
		else if command == "df" or command == "decipherfile" or command == "crackfile" then
			opts = cmd.split(" ")
			if opts.len != 2 then
				print("Usage: d|decipher|crack [hash]")
			else
				decipher_from_file(opts[1])
			end if
		else if command == "h" or command == "help" then
			print(USAGE)
		else if command == "ha" or command == "harden" then
			corrupt_logs(true)
		else if command == "i" or command == "interesting" then
			interesting_files()
		else if command == "n" or command == "nmap" then
			opts = cmd.split(" ")
			if opts.len != 2 then
				print("Usage: n|nmap [ip|address]")
			else
				targetIp = get_targetIp(opts[1])
				if errorState then continue

				if targetIp != opts[1] then print("ip: " + targetIp)
				get_target_ports(targetIp, null)
			end if
		else if command == "nuke" then
			confirm = user_input("Nuke current computer [y/N] ").lower
			if confirm == "y" or confirm == "yes" then
				nuke()
				corrupt_logs()
			end if
		else if command == "q" or command == "quit" or command == "e" or command == "exit" then
			break
		else
			warn("Unknown command '" + command + "'")
		end if
	end while
end function

main_title()
subtitle("Run 'h' for help")
main()